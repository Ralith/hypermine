#version 450

#include "common.h"
#include "surface.h"

layout(set = 1, binding = 1) restrict buffer State {
    uint surface_count;
};
layout(set = 1, binding = 2) writeonly restrict buffer Indirect {
    uint vertex_count;
    uint instance_count;
    uint first_vertex;
    uint first_instance;
};
layout(set = 1, binding = 3) writeonly restrict buffer Surfaces {
    Surface surfaces[];
};
layout(push_constant) uniform Uniforms {
    uint offset;
    uint draw_id;
    bool reverse_winding;
};

// Compute the occlusion state based on the three voxels surrounding an exposed vertex:
//
// a b
// c .
//
// There are four occlusion states:
// 0 - fully enclosed
// 1 - two neighboring voxels
// 2 - one neighboring voxel
// 3 - fully exposed
uint vertex_occlusion(bool a, bool b, bool c) {
    return b && c ? 0 : (3 - uint(a) - uint(b) - uint(c));
}

// Compute the occlusion state for each vertex on a surface
uvec4 surface_occlusion(ivec3 voxel, uint axis, bool inward) {
    // U/V axes on this surface
    const ivec3 uvs[3][2] = {
        {{0, 1, 0}, {0, 0, 1}},
        {{0, 0, 1}, {1, 0, 0}},
        {{1, 0, 0}, {0, 1, 0}},
    };

    if (!inward) {
        voxel += neighbor_offset(axis);
    }

    ivec3 u = uvs[axis][0];
    ivec3 v = uvs[axis][1];
    // 0 1 2
    // 3 . 4
    // 5 6 7
    bool occluders[8] = {
        get_voxel(voxel - u - v) != 0,
        get_voxel(voxel     - v) != 0,
        get_voxel(voxel + u - v) != 0,
        get_voxel(voxel - u    ) != 0,
        get_voxel(voxel + u    ) != 0,
        get_voxel(voxel - u + v) != 0,
        get_voxel(voxel     + v) != 0,
        get_voxel(voxel + u + v) != 0,
    };
    return uvec4(
        vertex_occlusion(occluders[0], occluders[1], occluders[3]),
        vertex_occlusion(occluders[2], occluders[1], occluders[4]),
        vertex_occlusion(occluders[5], occluders[6], occluders[3]),
        vertex_occlusion(occluders[7], occluders[6], occluders[4])
    );
}

void main() {
    Face info;
    bool has_face = find_face(info);

    uint count = atomicAdd(surface_count, uint(has_face));
    atomicMax(vertex_count, (count + uint(has_face)) * 6); // two triangles per face
    if (gl_GlobalInvocationID == uvec3(dimension * 3, dimension, dimension)) {
        instance_count = 1;
        first_vertex = offset * 6;
        first_instance = draw_id;
    }
    if (!has_face) return;

    surfaces[count] = surface(
        info.voxel,
        info.axis,
        info.inward ^^ reverse_winding,
        info.material,
        surface_occlusion(info.voxel, info.axis, info.inward)
    );
}
