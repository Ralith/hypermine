#version 450

#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#include "surface.h"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(set = 0, binding = 0) restrict uniform Parameters {
    int dimension;
};

layout(set = 1, binding = 0) readonly restrict buffer Voxels {
    uint voxel_pair[];
};

layout(set = 1, binding = 1) restrict buffer State {
    uint surface_count;
};

layout(set = 1, binding = 2) writeonly restrict buffer Indirect {
    uint vertex_count;
    uint instance_count;
    uint first_vertex;
    uint first_instance;
};

layout(set = 1, binding = 3) writeonly restrict buffer Surfaces {
    Surface surfaces[];
};

layout(push_constant) uniform Uniforms {
    uint offset;
    uint draw_id;
    bool reverse_winding;
};

uint get_voxel(ivec3 coords) {
    // We assume that all dimensions are equal, except that gl_NumWorkGroups.x is three times larger
    // (yielding one invocation per negative-facing face). Each coordinate is offset by 1 to account
    // for the margin on the negative-facing sides of the chunk.

    // There's a margin of 1 on each side of each dimension, only half of which is dispatched over
    uint linear = (coords.x + 1) + (coords.y + 1) * (dimension + 2) + (coords.z + 1) * (dimension + 2) * (dimension + 2);
    uint pair = voxel_pair[linear / 2];
    return (linear % 2) == 0 ? pair & 0xFFFF : pair >> 16;
}

// A face between a voxel and its neighbor in the -X, -Y, or -Z direction
struct Face {
    // coordinates of the voxel
    ivec3 voxel;
    // [0,3), indicating which axis this face is perpendicular to
    uint axis;
    // whether the normal is facing towards the center of this voxel
    bool inward;
    // contents of the solid voxel incident to the face, which may be a neighbor
    uint material;
};

ivec3 neighbor_offset(uint axis) {
    ivec3 off = ivec3(0);
    off[axis] = -1;
    return off;
}

bool find_face(out Face info) {
    // We only look at negative-facing faces of the current voxel, and iterate one past the end on
    // each dimension to enclose it fully.
    info.voxel = ivec3(gl_GlobalInvocationID.x / 3, gl_GlobalInvocationID.yz);
    info.axis = gl_GlobalInvocationID.x % 3;
    ivec3 neighbor = info.voxel + neighbor_offset(info.axis);
    // Don't generate faces between out-of-bounds voxels
    if (any(greaterThanEqual(info.voxel, ivec3(dimension))) && any(greaterThanEqual(neighbor, ivec3(dimension)))) return false;
    uint neighbor_mat = get_voxel(neighbor);
    uint self_mat = get_voxel(info.voxel);
    // Flip face around if the neighbor is the solid one
    info.inward = self_mat == 0;
    info.material = self_mat | neighbor_mat;
    return (neighbor_mat == 0) != (self_mat == 0);
}

// Compute the occlusion state based on the three voxels surrounding an exposed vertex:
//
// a b
// c .
//
// There are four occlusion states:
// 0 - fully enclosed
// 1 - two neighboring voxels
// 2 - one neighboring voxel
// 3 - fully exposed
uint vertex_occlusion(bool a, bool b, bool c) {
    return b && c ? 0 : (3 - uint(a) - uint(b) - uint(c));
}

// Compute the occlusion state for each vertex on a surface
uvec4 surface_occlusion(ivec3 voxel, uint axis, bool inward) {
    // U/V axes on this surface
    const ivec3 uvs[3][2] = {
        {{0, 1, 0}, {0, 0, 1}},
        {{0, 0, 1}, {1, 0, 0}},
        {{1, 0, 0}, {0, 1, 0}},
    };

    if (!inward) {
        voxel += neighbor_offset(axis);
    }

    ivec3 u = uvs[axis][0];
    ivec3 v = uvs[axis][1];
    // 0 1 2
    // 3 . 4
    // 5 6 7
    bool occluders[8] = {
        get_voxel(voxel - u - v) != 0,
        get_voxel(voxel     - v) != 0,
        get_voxel(voxel + u - v) != 0,
        get_voxel(voxel - u    ) != 0,
        get_voxel(voxel + u    ) != 0,
        get_voxel(voxel - u + v) != 0,
        get_voxel(voxel     + v) != 0,
        get_voxel(voxel + u + v) != 0,
    };
    return uvec4(
        vertex_occlusion(occluders[0], occluders[1], occluders[3]),
        vertex_occlusion(occluders[2], occluders[1], occluders[4]),
        vertex_occlusion(occluders[5], occluders[6], occluders[3]),
        vertex_occlusion(occluders[7], occluders[6], occluders[4])
    );
}

void main() {
    // Determine whether this thread generates a face
    Face info;
    bool has_face = find_face(info);

    // Number of faces in the subgroup
    uint subgroup_faces = subgroupAdd(uint(has_face));

    // Compute the starting storage offset for this subgroup
    uint subgroup_offset;
    if (subgroupElect()) {
        subgroup_offset = atomicAdd(surface_count, subgroup_faces);
        // Increment the vertex count while we're at it, accounting for two triangles per face.
        atomicAdd(vertex_count, subgroup_faces * 6);
    }
    subgroup_offset = subgroupBroadcastFirst(subgroup_offset);

    // Write the remaining indirect draw arguments for the complete dispatch
    if (gl_GlobalInvocationID == uvec3(dimension * 3, dimension, dimension)) {
        instance_count = 1;
        first_vertex = offset * 6;
        first_instance = draw_id;
    }

    if (!has_face) return;

    // Write the thread's face
    uint thread_offset = subgroupExclusiveAdd(uint(has_face));
    surfaces[subgroup_offset + thread_offset] = surface(
        info.voxel,
        info.axis,
        info.inward ^^ reverse_winding,
        info.material,
        surface_occlusion(info.voxel, info.axis, info.inward)
    );
}
